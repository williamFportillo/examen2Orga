#include <stdio.h>

int arr1[] = {7, 5, 3, 4, 6, 9}; // (size = 6) (minimum = 2)
int arr2[] = {4, 4, 4, 4, 4, 4}; // (size = 6) (minimum = 0)
int arr3[] = {9, 7, 5, 3, 2, 1}; // (size = 6) (minimum = 5)
int arr4[] = {1, 2, 3, 5, 7, 9}; // (size = 6) (minimum = 0)
int arr5[] = {9, 7}; //(size = 2) (minimum = 1)
int arr6[] = {7, 9}; //(size = 2) (minimum = 0)

#define ARRAY_SIZE(arr) (sizeof(arr)/sizeof(arr[0]))

int find_minimum(const int v[], int size)
{
    if (size == 0) {
        return -1;
    } else if (size == 1) {
        return 0;
    }
    int i = 0;
    
    while (i < (size - 1) && (v[i+1] < v[i])) {
        i++;
    }
    return i;
}

void test(int arr[], int size)
{
    int min = find_minimum(arr, size);
    printf("%d\n", min);
}

int main()
{
    test(arr1, ARRAY_SIZE(arr1));
    test(arr2, ARRAY_SIZE(arr2));
    test(arr3, ARRAY_SIZE(arr3));
    test(arr4, ARRAY_SIZE(arr4));
    test(arr5, ARRAY_SIZE(arr5));
    test(arr6, ARRAY_SIZE(arr6));
}

------------------------------------------------------------------------------------------------
sub esp, 112
mov dword[esp + 0],7
mov dword[esp + 4],5
mov dword[esp + 8],3
mov dword[esp + 12],4
mov dword[esp + 16],6
mov dword[esp + 20],9

mov dword[esp + 24], 4
mov dword[esp + 28], 4
mov dword[esp + 32],4
mov dword[esp + 36],4
mov dword[esp + 40],4
mov dword[esp + 44],4

mov dword[esp + 48], 9
mov dword[esp + 52], 7
mov dword[esp + 56],5
mov dword[esp + 60],3
mov dword[esp + 64],2
mov dword[esp + 68],1

mov dword[esp + 72], 1
mov dword[esp + 76], 2
mov dword[esp + 80],3
mov dword[esp + 84],5
mov dword[esp + 88],7
mov dword[esp + 92],9

mov dword[esp + 96], 9
mov dword[esp + 100], 7

mov dword[esp + 104], 7
mov dword[esp + 108], 9


call main
#stop

findMinimum:
    mov ecx, 0
    cmp eax, 0
    je if
    cmp eax, 1
    je else

    while:
            move ebx, dword[esp + 8]
            sub eax, 1
            cmp ecx, eax
            jge endwhile


            move eax, dword[esp+4]
            move eax, dword[esp+ecx*4]
            move eax, dword[esp+1]
            cmp eax, ebx
            jge endwhile
            add ecx, 1
            jmp while
    if:
        ret -1
    else:
        ret 0

    endwhile:
            ret

        
main:




